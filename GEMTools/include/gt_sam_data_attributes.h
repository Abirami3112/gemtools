/*
 * PROJECT: GEM-Tools library
 * FILE: gt_sam_data_attributes.h
 * DATE: 15/01/2013
 * AUTHOR(S): Santiago Marco-Sola <santiagomsola@gmail.com>
 * DESCRIPTION: Provides support to SAM format data structures
 */

#ifndef GT_SAM_DATA_ATTRIBUTES_H_
#define GT_SAM_DATA_ATTRIBUTES_H_

#include "gt_essentials.h"

#include "gt_map.h"
#include "gt_alignment.h"
#include "gt_template.h"

#include "gt_sequence_archive.h"

/*
 * Checkers
 */
#define GT_SAM_HEADERS_CHECK(sam_headers) \
  GT_STRING_CHECK(sam_headers->header); \
  GT_VECTOR_CHECK(sam_headers->read_group); \
  GT_VECTOR_CHECK(sam_headers->program); \
  GT_VECTOR_CHECK(sam_headers->comments)

/*
 * GTAttributes :: SAM alignment/template attribute
 */
#define GT_ATTR_ID_SAM_FLAGS "SAM_FLAGS"
#define GT_ATTR_ID_SAM_PRIMARY_ALIGNMENT "SAM_PRIMARY_MAP"
#define GT_ATTR_ID_SAM_PASSING_QC "SAM_PASSING_QC"
#define GT_ATTR_ID_SAM_PCR_DUPLICATE "SAM_PCR_DUPLICATE"

/*
 * SAM FLAGS
 */
#define GT_SAM_FLAG_MULTIPLE_SEGMENTS 0x1
#define GT_SAM_FLAG_PROPERLY_ALIGNED 0x2
#define GT_SAM_FLAG_UNMAPPED 0x4
#define GT_SAM_FLAG_NEXT_UNMAPPED 0x8
#define GT_SAM_FLAG_REVERSE_COMPLEMENT 0x10
#define GT_SAM_FLAG_NEXT_REVERSE_COMPLEMENT 0x20
#define GT_SAM_FLAG_FIRST_SEGMENT 0x40
#define GT_SAM_FLAG_LAST_SEGMENT 0x80
#define GT_SAM_FLAG_SECONDARY_ALIGNMENT 0x100
#define GT_SAM_FLAG_NOT_PASSING_QC 0x200
#define GT_SAM_FLAG_PCR_OR_OPTICAL_DUPLICATE 0x400

/*
 * SAM File specifics Attribute (SAM Headers)
 */
#define GT_SAM_HEADER_OK   0
#define GT_SAM_HEADER_TAG_INVALID   (-1)
#define GT_SAM_HEADER_VALUE_INVALID (-2)
typedef struct {
  gt_string* header; // @HD
  gt_sequence_archive* sequence_archive; // @SQ
  gt_vector* read_group; /* // @RG (gt_string*) */
  gt_vector* program; // @PG /* (gt_string*) */
  gt_vector* comments; // @ CO /* (gt_string*) */
} gt_sam_headers; // SAM Headers

GT_INLINE gt_sam_headers* gt_sam_header_new(void);
GT_INLINE void gt_sam_header_clear(gt_sam_headers* const sam_headers);
GT_INLINE void gt_sam_header_delete(gt_sam_headers* const sam_headers);

GT_INLINE gt_status gt_sam_header_set_header_record(gt_sam_headers* const sam_headers,gt_string* const header_line);
GT_INLINE gt_status gt_sam_header_add_read_group_record(gt_sam_headers* const sam_headers,gt_string* const read_group_record);
GT_INLINE gt_status gt_sam_header_add_program_record(gt_sam_headers* const sam_headers,gt_string* const program_record);
GT_INLINE gt_status gt_sam_header_add_comment(gt_sam_headers* const sam_headers,gt_string* const comment);

/*
 * SAM Optional Fields
 *   - SAM Attributes(optional fields) are just a vector of @gt_sam_attribute
 *     embedded into the general attributes(@gt_shash) of any object(@template,@alignment,@map,...)
 */
#define GT_ATTR_ID_SAM "SAM_ATTR"
typedef enum { SAM_ATTR_INT_VALUE, SAM_ATTR_FLOAT_VALUE, SAM_ATTR_STRING_VALUE,
               SAM_ATTR_INT_FUNC,  SAM_ATTR_FLOAT_FUNC,  SAM_ATTR_STRING_FUNC } gt_sam_attribute_t;
typedef struct {
  char tag[2];
  gt_sam_attribute_t attribute_type;
  char type_id;
  union {
    /* Values */
    int64_t i_value;
    double d_value;
    gt_string* s_value;
    /* Functions */
    int64_t (*i_func)(gt_template*,gt_alignment*,gt_map**);
    double (*d_func)(gt_template*,gt_alignment*,gt_map**);
    gt_string* (*s_func)(gt_template*,gt_alignment*,gt_map**);
  };
} gt_sam_attribute;

// Setup
GT_INLINE gt_vector* gt_attribute_sam_get_attributes(gt_shash* const general_attributes);
GT_INLINE gt_vector* gt_attribute_sam_fetch_attributes(gt_shash* const general_attributes);
GT_INLINE void gt_attribute_sam_delete_attributes(gt_shash* const general_attributes);
GT_INLINE void gt_attribute_sam_clear_attributes(gt_shash* const general_attributes);
GT_INLINE bool gt_attribute_has_sam_attributes(gt_shash* const general_attributes);

// Accessors
GT_INLINE gt_sam_attribute* gt_attribute_sam_get(gt_shash* const general_attributes,char* const tag);

// Add values (optional fields values)
GT_INLINE void gt_attribute_sam_add_ivalue(gt_shash* const general_attributes,char* const tag,char type_id,const int64_t value);
GT_INLINE void gt_attribute_sam_add_fvalue(gt_shash* const general_attributes,char* const tag,char type_id,const double value);
GT_INLINE void gt_attribute_sam_add_svalue(gt_shash* const general_attributes,char* const tag,char type_id,char* const text,const int64_t length);

// Add function (optional fields values generated by the function)
GT_INLINE void gt_attribute_sam_add_ifunc(gt_shash* const general_attributes,char* const tag,char type_id,int64_t (*i_func)(gt_template*,gt_alignment*,gt_map**));
GT_INLINE void gt_attribute_sam_add_ffunc(gt_shash* const general_attributes,char* const tag,char type_id,double (*d_func)(gt_template*,gt_alignment*,gt_map**));
GT_INLINE void gt_attribute_sam_add_sfunc(gt_shash* const general_attributes,char* const tag,char type_id,gt_string* (*s_func)(gt_template*,gt_alignment*,gt_map**));

#define GT_ATTRIBUTES_SAM_ITERATE(general_attributes,attr_element) \
  const gt_vector* sam_attr_##general_attributes = gt_attribute_get(general_attributes,GT_ATTR_ID_SAM);  \
  GT_VECTOR_ITERATE(sam_attr_##general_attributes,attr_element,attr_element_##counter,gt_sam_attribute)


#endif /* GT_SAM_DATA_ATTRIBUTES_H_ */
